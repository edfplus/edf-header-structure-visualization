{"version":3,"sources":["edf-header.js","App.js","serviceWorker.js","index.js"],"names":["edf_header","staticFields","name","size","description","dynamicFields","numberOfSignals","edfHeader","substr","channelNames","Array","from","map","val","index","concat","parsedHeader","header","currentColor","result","forEach","field","i","className","value","push","channel","Math","min","parseHeader","Grid","_ref","hoveredItem","setHoveredItem","react_default","a","createElement","onMouseLeave","_ref2","key","includes","onMouseOver","Legend","_ref3","style","flex","App","_useState","useState","_useState2","Object","slicedToArray","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f84ac545.chunk.js","sourcesContent":["export default '0       AZL:0104697 EEG:0879/87 Jan van Leiden            M 02.08.51                    MPX:0130 date:24.06.87 time:04.35.00-04.55.00 pwd:Technician  Gotosleep:  .  .0024.06.8704.35.00+2048                                               +40     +30     +7  FpzCz EEG       PzOz  EEG       EOG   horizontalResp. flow      Subm. EMG       Temp. body      Event marker    Ag-AgCl electrodes                                                              Ag-AgCl electrodes                                                              Ag-AgCl electrodes                                                              Oral-nasal thermistors                                                          Ag-AgCl electrodes                                                              Rectal thermistor                                                               Marker button                                                                   uV      uV      uV      degree CuV-mrs  degree C        -199    -189    -978    ?       0       +36     off     +196    +188    +967    ?       +4      +38     on      -2048   -2048   -2048   -2048   0       -955    +200    +2047   +2047   +2047   +2047   +2000   +1096   +900    HP:0.5Hz LP:100Hz                                                               HP:0.5Hz LP:100Hz                                                               HP:0.5Hz LP:100Hz                                                               HP:0.03Hz LP:0.9Hz                                                              HP:16Hz Rectification LP:0.7Hz                                                                                                                                  Hold during 2 seconds                                                           3000    3000    3000    30      30      30      30                                                                                                                                                                                                                                      ';","import React, { useState } from 'react';\nimport edfHeader from './edf-header';\n// import './open-color.css';\nimport './App.css';\n\n/*\n  == EDF Structure ==\n\n  STATIC HEADER RECORD\n  --------------------\n  8 ascii  : version of this data format (0)\n  80 ascii : local patient identification\n  80 ascii : local recording identification\n  8 ascii  : startdate of recording (dd.mm.yy)\n  8 ascii  : starttime of recording (hh.mm.ss)\n  8 ascii  : number of bytes in header record\n  44 ascii : reserved\n  8 ascii  : number of data records\n  8 ascii  : duration of a data record, in seconds\n  4 ascii  : number of signals (ns) in data record\n\n  DYNAMIC HEADER RECORD\n  ---------------------\n  ns * 16 ascii : ns * label (e.g. EEG Fpz-Cz or Body temp)\n  ns * 80 ascii : ns * transducer type (e.g. AgAgCl electrode)\n  ns * 8 ascii  : ns * physical dimension (e.g. uV or degreeC)\n  ns * 8 ascii  : ns * physical minimum (e.g. -500 or 34)\n  ns * 8 ascii  : ns * physical maximum (e.g. 500 or 40)\n  ns * 8 ascii  : ns * digital minimum (e.g. -2048)\n  ns * 8 ascii  : ns * digital maximum (e.g. 2047)\n  ns * 80 ascii : ns * prefiltering (e.g. HP:0.1Hz LP:75Hz)\n  ns * 8 ascii  : ns * nr of samples in each data record\n  ns * 32 ascii : ns * reserved\n\n  DATA RECORD\n  -----------\n  nr of samples[1] * integer : first signal in the data record\n  nr of samples[2] * integer : second signal\n  ..\n  nr of samples[ns] * integer : last signal\n*/\n\nconst staticFields = [ /* eslint-disable no-multi-spaces, key-spacing */\n  { name: 'version',               size:  8, description: 'version of this data format' },\n  { name: 'patientIdentification', size: 80, description: 'local patient identification' },\n  { name: 'recordIdentification',  size: 80, description: 'local recording identification' },\n  { name: 'startDate',             size:  8, description: 'startdate of recording (dd.mm.yy)' },\n  { name: 'startTime',             size:  8, description: 'starttime of recording (hh.mm.ss)' },\n  { name: 'recordHeaderByteSize',  size:  8, description: 'number of bytes in header record' },\n  { name: 'staticReserved',        size: 44, description: 'reserved' },\n  { name: 'numberOfDataRecords',   size:  8, description: 'number of data records' },\n  { name: 'recordDurationTime',    size:  8, description: 'duration of a data record, in seconds' },\n  { name: 'numberOfSignals',       size:  4, description: 'number of signals (ns) in data record' },\n]; /* eslint-enable no-multi-spaces, key-spacing */\n\nconst dynamicFields = [ /* eslint-disable no-multi-spaces, key-spacing */\n  { name: 'label',             size: 16, description: 'label' },\n  { name: 'transducerType',    size: 80, description: 'transducer type' },\n  { name: 'physicalDimension', size:  8, description: 'physical dimension' },\n  { name: 'physicalMinimum',   size:  8, description: 'physical minimum' },\n  { name: 'physicalMaximum',   size:  8, description: 'physical maximum' },\n  { name: 'digitalMinimum',    size:  8, description: 'digital minimum' },\n  { name: 'digitalMaximum',    size:  8, description: 'digital maximum' },\n  { name: 'preFiltering',      size: 80, description: 'prefiltering' },\n  { name: 'numberOfSamples',   size:  8, description: 'nr of samples in each data record' },\n  { name: 'dynamicReserved',   size: 32, description: 'reserved' },\n]; /* eslint-enable no-multi-spaces, key-spacing */\n\nconst numberOfSignals = +edfHeader.substr(252,4);\nconst channelNames = Array.from(new Array(numberOfSignals)).map((val, index) => `channel-${index + 1}`);\nconst parsedHeader = parseHeader(edfHeader);\n\nfunction parseHeader(header) {\n  let currentColor = 0;\n  let index = 0;\n  let result = [];\n\n  staticFields.forEach((field) => {\n    for (let i = 0; i < field.size; i++) {\n      const className = `static-header ${field.name} c${currentColor}`;\n      const value = header[index];\n      result.push({ className, value });\n      index += 1;\n    }\n    currentColor = (currentColor + 1) % 10;\n  });\n\n  dynamicFields.forEach((field) => {\n    for (let channel = 1; channel <= numberOfSignals; channel++) { // starts with 1\n      for (let i = 0; i < field.size; i++) {\n        const className = `dynamic-header channel-${channel} ${field.name} c${currentColor}`;\n        const value = header[index];\n        result.push({ className, value });\n        index += 1;\n      }\n      currentColor = (currentColor + 1) % Math.min(numberOfSignals, 10);\n    }\n  });\n\n  return result;\n}\n\nfunction App() {\n  const [hoveredItem, setHoveredItem] = useState('NONE');\n  return (\n    <div className=\"App\">\n      <h1>EDF Structure</h1>\n      <Grid hoveredItem={hoveredItem} setHoveredItem={setHoveredItem} />\n      <Legend hoveredItem={hoveredItem} setHoveredItem={setHoveredItem} />\n    </div>\n  );\n}\n\nfunction Grid({ hoveredItem, setHoveredItem }) {\n  return (\n    <div className=\"edf-grid colorable\" onMouseLeave={() => setHoveredItem('NONE')}>\n      {parsedHeader.map(({ className, value }, index) =>\n        <span\n          key={index}\n          className={`${className} ${className.includes(hoveredItem) ? 'active' : ''}`}\n          onMouseOver={() => setHoveredItem(className)}\n        >\n          {value}\n        </span>\n      )}\n    </div>\n  );\n}\n\nfunction Legend({ hoveredItem, setHoveredItem }) {\n  return (\n    <div className={`legend flex ${hoveredItem}`} onMouseLeave={() => setHoveredItem('NONE')}>\n      <div>\n        <h2\n          onMouseOver={() => setHoveredItem('static-header')}\n          className={`${hoveredItem.includes('static-header') ? 'active' : ''}`}\n        >\n          static header\n        </h2>\n        <h3>&nbsp;</h3>\n        <ul>\n          {staticFields.map(field =>\n            <li\n              key={field.name}\n              className={`${field.name} ${hoveredItem.includes(field.name) ? 'active' : ''}`}\n              onMouseOver={() => setHoveredItem(field.name)}\n            >\n                {field.description}\n            </li>\n          )}\n        </ul>\n      </div>\n      <div style={{ flex: 2 }}>\n        <h2\n          onMouseOver={() => setHoveredItem('dynamic-header')}\n          className={`${hoveredItem.includes('dynamic-header') ? 'active' : ''}`}\n        >\n          dynamic header\n        </h2>\n        <div className=\"flex\">\n          <div>\n            <h3>part</h3>\n            <ul>\n              {dynamicFields.map(field =>\n                <li\n                  key={field.name}\n                  className={`${field.name} ${hoveredItem.includes(field.name) ? 'active' : ''}`}\n                  onMouseOver={() => setHoveredItem(field.name)}\n                >\n                    {field.description}\n                </li>\n              )}\n            </ul>\n          </div>\n          <div>\n            <h3>channels</h3>\n            <ul className=\"colorable\">\n              {channelNames.map((name, index) =>\n                <li\n                  key={name}\n                  className={`${name} ${hoveredItem.includes(name) ? 'active' : ''}`}\n                  onMouseOver={() => setHoveredItem(name)}\n                >\n                  {name} <span className={`color-bubble c${index % numberOfSignals}`} />\n                </li>\n              )}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}